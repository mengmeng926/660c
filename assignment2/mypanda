from collections import OrderedDict
import csv
from dateutil.parser import parse
import datetime, time


class DataFrame(object):
    @classmethod
    def from_csv(cls, path):
        with open(path, 'rU') as f:
            reader = csv.reader(f, delimiter=',', quotechar='"')
            data = []
            for row in reader:
                data.append(row)
        return cls(data)

    def __init__(self, list_of_lists, header=True):
        if header:
            self.header = list_of_lists[0]
            self.data = list_of_lists[1:]
        else:
            self.header = ['column' + str(index + 1) for index, column in enumerate(self.data[0])]
            self.data = list_of_lists
            self.data = [OrderedDict(zip(self.header, row)) for row in self.data]
     # task 1
            if len(set(self.header)) != len(self.header):
                raise Exception('duplicates found')
        else:
            self.header = ['column' + str(i+1) for i in range(len(list_of_lists[0]))]
            self.data = list_of_lists
     # task 2
        self.data = [map(lambda x:x.strip(),row) for row in self.data]
        self.data = [OrderedDict(zip(self.header,row)) for row in self.data]
 def __getitem__(self, item):
        # this is for rows only
        if isinstance(item, (int, slice)):
            return self.data[item]

        # this is for columns only
        elif isinstance(item, str):
            return [row[item] for row in self.data]

        # this is for rows and columns
        elif isinstance(item, tuple):
            if isinstance(item[0], list) or isinstance(item[1], list):

                if isinstance(item[0], list):
                    rowz = [row for index, row in enumerate(self.data) if index in item[0]]
                else:
                    rowz = self.data[item[0]]

                if isinstance(item[1], list):
                    if all([isinstance(thing, int) for thing in item[1]]):
                        return [[column_value for index, column_value in enumerate([value for value in row.itervalues()]) if index in item[1]] for row in rowz]
                    elif all([isinstance(thing,str) for thing in item[1]]):
                        return [[row[column_name] for column_name in item[1]] for row in rowz]
                    else:
                        raise TypeError('What the hell is this?')
        else:
                    return rowz[item[1]]
        else:
                if isinstance(item[0],(int,slice)) and isinstance(item[1],(int,slice)):
                    # python3 use values(),keys(),items() instead of itervalues()...
                    return [list(row.values())[item[1]] for row in self.data[item[0]]]
                elif isinstance(item[1],str):
                    return [row[item[1]] for row in self.data[item[0]]]
                else:
                    raise TypeError('type error')

        elif isinstance(item,list):
             return [[ value for key ,value in row.items() if key in item] for row in self.data]
        #task 3

    def type(self,col_name):
        is_time = 0
        try:
            nums = [float(row[col_name].replace(',','')) for row in self.data]
            return nums, 1 if is_time else 0
        except:
            try:
                nums = [parse(row[col_name].replace(',','')) for row in self.data]
                nums= [time.mktime(num.timetuple()) for num in nums]
                is_time = 1
                return nums, 1 if is_time else 0
            except:
                raise TypeError('Cannot be calculated')


    def min(self,col_name):
        nums, is_time= self.type(col_name)
        result = min(nums)
        return datetime.datetime.fromtimestamp(result) if is_time else result

    def max(self,col_name):
        nums, is_time = self.type(col_name)
        result = max(nums)
        return datetime.datetime.fromtimestamp(result) if is_time else result

    def median(self,col_name):
        nums, is_time = self.type(col_name)
        nums = sorted(nums)
        center = int(len(nums) / 2)
        if len(nums) % 2 == 0:
            result = sum(nums[center - 1:center + 1]) / 2.0
            return datetime.datetime.fromtimestamp(result) if is_time else result
        else:
            result = nums[center]
            return datetime.datetime.fromtimestamp(result) if is_time else result

    def mean(self,col_name):
        nums, is_time = self.type(col_name)
        result = sum(nums)/len(nums)
        return datetime.datetime.fromtimestamp(result) if is_time else result

    def sum(self,col_name):
        nums,is_time = self.type(col_name)
        return sum(nums)

    def std(self,col_name):
        nums ,is_time = self.type(col_name)
        mean = sum(nums)/len(nums)
        return (sum([(num-mean)**2 for num in nums])/len(nums))**0.5
        #task 4
         def add_rows(self, list_of_lists):
        length = len(df.data[0])
        for row in list_of_lists:
            if (len(row) == length):
                df.data.append(row)
            else:
                raise ValueError('The length of the row does not match to that of the existing data')
        df.data = [OrderedDict(zip(df.header, row)) for row in df.data]
        #task 5
        def add_columns(self, list_of_values, column_name):
        if len(list_of_values) == len(self.data):
            self.header = self.header + column_name
            self.data = [OrderedDict(zip(list(old_row.keys()) + column_name, list(old_row.values()) + added_values))
                     for old_row, added_values in zip(self.data, list_of_values)]
            return self
        else:
            raise Exception('Incorrect number of rows')
            
'''
infile = open('SalesJan2009.csv')
lines = infile.readlines()
lines = lines[0].split('\r')
data = [l.split(',') for l in lines]
things = lines[559].split('"')
data[559] = things[0].split(',')[:-1] + [things[1]] + things[-1].split(',')[1:]

df = DataFrame.from_csv('SalesJan2009.csv')




# get the 5th row
fifth = df[4]
sliced = df[4:10]

# get item definition for df [row, column]

# get the third column
tupled = df[:, 2]
tupled_slices = df[0:5, :3]

tupled_bits = df[[1, 4], [1, 4]]


# adding header for data with no header
df = DataFrame(list_of_lists=data[1:], header=False)

# fetch columns by name
named = df['column1']
named_multi = df[['column1', 'column7']]

#fetch rows and (columns by name)
named_rows_and_columns = df[:5, 'column7']
named_rows_and_multi_columns = df[:5, ['column4', 'column7']]


#testing from_csv class method
df = DataFrame.from_csv('SalesJan2009.csv')
rows = df.get_rows_where_column_has_value('Payment_Type', 'Visa')
indices = df.get_rows_where_column_has_value('Payment_Type', 'Visa', index_only=True)

rows_way2 = df[indices, ['Product', 'City']]
'''

# ============test task 3============
test1 = df.min('Last_Login')
print(test1)
test2 = df.max('Price')
print(test2)
# ============test task 4============
# new_lol = [['1/3/09 6:17','Product1','1200','Mastercard','carolina',
#     'Basildon','England','United Kingdom','1/2/09 6:00','1/2/09 6:08','51.5','-1.1166667'],
#     ['1/3/09 6:17','Product1','1200','Mastercard','carolina',
#     'Basildon','England','United Kingdom','1/2/09 6:00','1/2/09 6:08','51.5','-1.1166667']]
# df = df.add_rows(new_lol)

# test = df.mean('Last_Login')
# ============test task 5============
# new_col = df[:,:3]
# df = df.add_columns(new_col)

# test = df.mean('column15') # calculate the mean of new added 'column15'

# print('finished')
